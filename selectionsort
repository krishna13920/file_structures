#include <iostream>
#include <vector>
#include "sort.cpp"

using namespace std;

	/**
	* @brief Peforms the replacement selection sort 
	* @details Takes a vector filled with data and uses an active and pending heap to
	* create multiple sorted lists and stores the lists in a vector.
	*
	* @param vectorToSort The vector to be sorted
	* @param heapDirection Flag default is true
	* @return vectorToReturn Returns a vector of sorted vectors
	*/
template <typename T>
vector<vector<T>> replacementselectionSort(const vector<T> vectorToSort, const int heapSize = 8) {

	// Instantiate a vector of vectors to return
	vector<vector<T>> *vectorToReturn = new vector<vector<T>>;

	// Instantiate a heap
	SortProject<T> *myHeap = new SortProject<T>();

	// Declare variables
	bool heapDirection = true;
	T temp;
	int totalCap = 8; // store capacity of myHeap into totalCap
	unsigned int IndexOfNextItemToSort;
	int currentList = 0;
	T lastElementPopped, newElement;
	vector<T> *currentSortedList = new vector<T>;

	// While the replacement selection vector is not full, heapify new element
	for (unsigned int i = 0; i < totalCap && i < vectorToSort.size(); i++) {
			temp = vectorToSort[i];
			myHeap->current_heap_push(temp);
			IndexOfNextItemToSort = i + 1;
		}
	//while there is a new element
	while (IndexOfNextItemToSort < vectorToSort.size() /*|| myHeap.size > 0*/) {
		//pop the root of the current heap
		lastElementPopped = myHeap->current_heap_pop();
		//add the root to the current sorted list
		currentSortedList->push_back(lastElementPopped);

		if (IndexOfNextItemToSort < vectorToSort.size()) {
			newElement = vectorToSort[IndexOfNextItemToSort];
			IndexOfNextItemToSort++;
			
			// if the new element is less than the last element popped
			if (newElement < lastElementPopped) {
				// push it onto the the pending heap
				myHeap->pending_heap_push(newElement);
				SortProject::currentHeapSize--;
				SortProject::pendingHeapSize++;
				//if current heap size is zero push the currentSortedList onto the vector to return
				if (myHeap->size == 0) {
					vectorToReturn->push_back(*currentSortedList);
					currentSortedList = new vector<T>;
					heapDirection = false;
				}
			}
			// else if the new element is greater than the last element popped
			else
				// push it onto the current heap
				myHeap->current_heap_push(newElement);
		}
	}
	delete myHeap;
	return *vectorToReturn;
}
